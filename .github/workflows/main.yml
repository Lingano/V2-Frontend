name: Deploy to VPS

on:
    push:
        branches:
            - main

jobs:
    checkout_code:
        runs-on: ubuntu-latest
        outputs:
            backend_path: ${{ steps.set-paths.outputs.backend_path }}
            frontend_path: ${{ steps.set-paths.outputs.frontend_path }}
        steps:
            - name: Set dynamic paths based on repository
              id: set-paths
              run: |
                  if [[ "${{ github.repository }}" == "Lingano/LinganoGO" ]]; then
                    echo "Running in backend repo"
                    echo "backend_path=backend" >> $GITHUB_OUTPUT
                    echo "frontend_path=frontend" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.repository }}" == "Lingano/V2-Frontend" ]]; then
                    echo "Running in frontend repo"
                    echo "backend_path=backend" >> $GITHUB_OUTPUT
                    echo "frontend_path=frontend" >> $GITHUB_OUTPUT
                  else
                    echo "Unknown repository"
                    exit 1
                  fi

            - name: Checkout Backend Repo
              uses: actions/checkout@v4
              with:
                  repository: Lingano/LinganoGO
                  token: ${{ secrets.GITHUB_TOKEN }}
                  path: ${{ steps.set-paths.outputs.backend_path }}

            - name: Checkout Frontend Repo
              uses: actions/checkout@v4
              with:
                  repository: Lingano/V2-Frontend
                  token: ${{ secrets.GITHUB_TOKEN }}
                  path: ${{ steps.set-paths.outputs.frontend_path }}

            - name: Upload backend artifact
              uses: actions/upload-artifact@v4
              with:
                  name: backend-code
                  path: ${{ steps.set-paths.outputs.backend_path }}

            - name: Upload frontend artifact
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-code
                  path: ${{ steps.set-paths.outputs.frontend_path }}

    deploy_backend:
        runs-on: ubuntu-latest
        needs: checkout_code
        env:
            VPS_IP: ${{ secrets.VPS_IP }}
            VPS_USER: ${{ secrets.VPS_USER }}
        steps:
            - name: Download backend code
              uses: actions/download-artifact@v4
              with:
                  name: backend-code
                  path: ${{ needs.checkout_code.outputs.backend_path }}

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Build Go application
              run: |
                  cd ${{ needs.checkout_code.outputs.backend_path }}
                  echo "Current directory: $(pwd)"
                  echo "Listing files: $(ls -la)"
                  go install github.com/swaggo/swag/cmd/swag@latest
                  swag init
                  go build -v -o LinganoGOApp main.go

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H ${{ env.VPS_IP }} >> ~/.ssh/known_hosts

            - name: Deploy Go Backend to VPS
              run: |
                  ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_IP }} "mkdir -p ~/LinganoDeployment/LinganoGO"
                  rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./${{ needs.checkout_code.outputs.backend_path }}/LinganoGOApp ${{ env.VPS_USER }}@${{ env.VPS_IP }}:~/LinganoDeployment/LinganoGO/
                  ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_IP }} " \
                    echo \"MONGODB_URI='${{ secrets.MONGODB_URI }}'\" > ~/LinganoDeployment/LinganoGO/.env && \
                    echo \"JWT_SECRET='${{ secrets.JWT_SECRET }}'\" >> ~/LinganoDeployment/LinganoGO/.env && \
                    echo \"DB_NAME='${{ secrets.DB_NAME }}'\" >> ~/LinganoDeployment/LinganoGO/.env && \
                    echo \"PORT='${{ secrets.PORT_NUMBER }}'\" >> ~/LinganoDeployment/LinganoGO/.env"
                  ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_IP }} << 'EOF_REMOTE_SCRIPT'
                    cd ~/LinganoDeployment/LinganoGO
                    chmod +x LinganoGOApp
                    echo "Attempting to restart Go application..."
                    PORT_TO_USE=$(grep -oP 'PORT=\\K[0-9]+' ~/LinganoDeployment/LinganoGO/.env || echo 8080)
                    echo "Attempting to stop any process on port $PORT_TO_USE..."
                    if sudo fuser -k -n tcp $PORT_TO_USE; then
                      echo "Successfully stopped process(es) on port $PORT_TO_USE using fuser."
                      sleep 2
                    else
                      echo "No process found on port $PORT_TO_USE with fuser, or fuser is not available. Attempting pkill as fallback."
                      if pgrep -f LinganoGOApp; then
                        echo "Stopping existing LinganoGOApp process using pkill..."
                        pkill -f LinganoGOApp
                        sleep 2
                      else
                        echo "No LinganoGOApp process found with pgrep."
                      fi
                    fi
                    echo "Starting LinganoGOApp process in background on port $PORT_TO_USE..."
                    nohup ./LinganoGOApp > app.log 2>&1 &
                    echo "Restarting Nginx to ensure it is running..."
                    sudo systemctl restart nginx
                    echo "Go Backend deployed and Nginx restarted!"
                  EOF_REMOTE_SCRIPT

    deploy_frontend:
        runs-on: ubuntu-latest
        needs: checkout_code
        env:
            VPS_IP: ${{ secrets.VPS_IP }}
            VPS_USER: ${{ secrets.VPS_USER }}
        steps:
            - name: Download frontend code
              uses: actions/download-artifact@v4
              with:
                  name: frontend-code
                  path: ${{ needs.checkout_code.outputs.frontend_path }}

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H $VPS_IP >> ~/.ssh/known_hosts

            - name: Deploy Frontend to VPS
              run: |
                  ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP "mkdir -p ~/LinganoDeployment/V2-Frontend"
                  rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./${{ needs.checkout_code.outputs.frontend_path }}/ $VPS_USER@$VPS_IP:~/LinganoDeployment/V2-Frontend/
                  ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP << 'EOF_FRONTEND_SCRIPT'
                    cd ~/LinganoDeployment/V2-Frontend
                    npm install
                    npm run build
                    echo "Frontend deployed!"
                  EOF_FRONTEND_SCRIPT
