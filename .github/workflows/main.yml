name: Deploy to VPS

on:
    push:
        branches:
            - main # Adjust this if your default branch is different

jobs:
    checkout_code:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Backend Repository
              uses: actions/checkout@v4
              with:
                  repository: "Lingano/V2-Backend" # Update with your backend repo
                  token: ${{ secrets.GITHUB_TOKEN }}
                  path: backend # Checkout backend to a specific 'backend' directory

            - name: Checkout Frontend Repository
              uses: actions/checkout@v4
              with:
                  repository: "Lingano/V2-Frontend" # Update with your frontend repo
                  token: ${{ secrets.GITHUB_TOKEN }}
                  path: frontend # Checkout frontend to a specific 'frontend' directory

            - name: Upload backend artifact
              uses: actions/upload-artifact@v4
              with:
                  name: backend-code
                  path: backend

            - name: Upload frontend artifact
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-code
                  path: frontend

    deploy_backend:
        runs-on: ubuntu-latest
        needs: checkout_code # Depends on the checkout_code job
        steps:
            - name: Download backend code
              uses: actions/download-artifact@v4
              with:
                  name: backend-code
                  path: backend # Download to a 'backend' directory

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa # Correct permissions for the private key
                  ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
              env:
                  VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
                  VPS_IP: ${{ secrets.VPS_IP }}

            - name: Deploy Backend to VPS
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
                    # Ensure the target directory exists
                    mkdir -p ~/LinganoDeployment/V2-Backend
                    # Copy files from the runner to the VPS
                    # Note: scp requires the source path to be relative to the artifact download path
                    # We will rsync the contents of the 'backend' directory on the runner
                    echo "Copying backend files to VPS..."
                  EOF
                  rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./backend/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/LinganoDeployment/V2-Backend/
                  ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
                    cd ~/LinganoDeployment/V2-Backend # Change to your backend repo directory
                    # git pull origin main # Not needed if rsyncing the latest code
                    # Install dependencies and restart your backend service if necessary
                    python3 -m venv venv # Create the virtual environment
                    source venv/bin/activate # Activate the virtual environment
                    pip install -r requirements.txt # For Django or other Python dependencies
                    python manage.py migrate # For Django migrations
                    sudo systemctl restart gunicorn # If you're using Gunicorn (adjust as needed)
                    echo "Backend deployed!"
                  EOF
              env:
                  VPS_IP: ${{ secrets.VPS_IP }}
                  VPS_USER: ${{ secrets.VPS_USER }}

    deploy_frontend:
        runs-on: ubuntu-latest
        needs: checkout_code # Depends on the checkout_code job
        steps:
            - name: Download frontend code
              uses: actions/download-artifact@v4
              with:
                  name: frontend-code
                  path: frontend # Download to a 'frontend' directory

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa # Correct permissions for the private key
                  ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
              env:
                  VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
                  VPS_IP: ${{ secrets.VPS_IP }}

            - name: Deploy Frontend to VPS
              env: # Environment variables for the runner executing this step
                  VPS_IP: ${{ secrets.VPS_IP }}
                  VPS_USER: ${{ secrets.VPS_USER }}
                  # This makes the secret available for interpolation into the run script's heredoc
                  API_URL_FOR_BUILD: ${{ secrets.VITE_API_BASE_URL}}
              run: |
                  # First part of SSH command to create directory (if needed) and echo
                  ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_IP }} << 'EOF'
                    # Ensure the target directory exists
                    mkdir -p ~/LinganoDeployment/V2-Frontend
                    echo "Copying frontend files to VPS..."
                  EOF

                  # rsync command
                  rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./frontend/ ${{ env.VPS_USER }}@${{ env.VPS_IP }}:~/LinganoDeployment/V2-Frontend/
                  
                  # Second part of SSH command to build and restart
                  # Note: Using EOF without quotes to allow runner-side expansion of API_URL_FOR_BUILD
                  ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_IP }} << EOF 
                    echo "Setting VITE_API_BASE_URL for the build process on VPS."
                    export VITE_API_BASE_URL="${API_URL_FOR_BUILD}" # Use the env var passed from the runner
                    
                    echo "Current VITE_API_BASE_URL on VPS: \$VITE_API_BASE_URL" # For debugging on VPS logs

                    cd ~/LinganoDeployment/V2-Frontend # Change to your frontend repo directory
                    
                    echo "Installing frontend dependencies..."
                    npm install
                    
                    echo "Building frontend..."
                    # The npm run build command will now use the VITE_API_BASE_URL set above
                    npm run build 
                    
                    echo "Restarting Nginx..."
                    sudo systemctl restart nginx # If you're using nginx for serving frontend
                    
                    echo "Frontend deployed!"
                  EOF
              env:
                  VPS_IP: ${{ secrets.VPS_IP }}
                  VPS_USER: ${{ secrets.VPS_USER }}
